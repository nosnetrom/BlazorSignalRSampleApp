@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<div class="form-group">
    <label>
        <span>User:</span><br />
        <input type="text" class="txtUser"  @bind="userInput" />
    </label>
</div>
<div class="form-group">
    <label>
        <span>Message:</span><br />
        <input type="text" class="txtMessage" @bind="messageInput" size="50" />
    </label>
</div>
<button class="btn btn-primary" @onclick="Send" disabled="@(!IsConnected)">Send</button>

@if (messages.Count > 0)
{
    <hr>
}


<table id="messagesList">
    @foreach (var message in messages)
    {
        <tr>
            <td>@message.Split(":", 2)[0]</td>
            <td>@message.Split(":", 2)[1]</td>
        </tr>
    }
</table>

@code {
    private HubConnection hubConnection;
    private List<string> messages = new List<string>();
    private string userInput;
    private string messageInput;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    Task Send() =>
        hubConnection.SendAsync("SendMessage", userInput, messageInput);

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;
        
    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }
}